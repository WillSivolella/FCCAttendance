#(Intercept) 22480.41    1296.94  17.333  3.7e-16 ***
#  Weekend      1995.23     740.86   2.693    0.012 *
#  FCC.Rank      -98.15      92.85  -1.057    0.300
#Opp.Rank      -55.91      74.41  -0.751    0.459
---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Residual standard error: 1625 on 27 degrees of freedom
#Multiple R-squared:  0.2396,	Adjusted R-squared:  0.1551
#F-statistic: 2.835 on 3 and 27 DF,  p-value: 0.05689
# If predicting based on weekend, +1995.23 to intercept (when Weekend = 1)
# If predicting based on if FCC table position, -98.15*position to intercept
# If predicting based on if Opp table position,  -55.91*position to intercept
# "Weekend" is the only variable that is statistically significant
#Create Forecast Model:
forecast <- predict(regression, proj_attendance)
forecast
library(MASS)
library(tidyverse)
library(tidymodels)
library(modelr)
library(class)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("dplyr")
install.packages("dplyr")
library(ggplot2)
all_matches <- read.csv("AttendanceData.csv")
attendance <- subset(all_matches, is.na(Attendance) == FALSE)
proj_attendance <- subset(all_matches, is.na(Attendance) == TRUE)
str(attendance)
# Displays names and indexes of all the variables
names(attendance)
# Display of Summary statistics for the attendance
summary(attendance$Attendance)
# Finding interquartile range to see if there are outliers in the data
iqr <- 24188 - 21212 # = 2976
min <- 21212-1.5*iqr # = 16748
max <- 24188 + 1.5*iqr # = 28652
hist(attendance$Attendance, main="Attendance Distribution", xlab="Attendance")
#Creating subsets of data based on weekend versus weekday
wknd <- subset(attendance, Weekend == 1)
wkday <- subset(attendance, Weekend == 0)
# Histogram visualizations of subsets
par(mfrow=c(1,2))
hist(wknd$Attendance, main="Weekend Attendance", xlab="Attendance")
# Bimodal distribution with peaks at the middle and end buckets
hist(wkday$Attendance, main="Weekday Attendance", xlab="Attendance")
#Calculating and storing sample means
xbar_wknd <- mean(wknd$Attendance, na.rm = TRUE)
xbar_wkday <- mean(wkday$Attendance, na.rm = TRUE)
xbar_wknd # = 23084.32
xbar_wkday # = 21126.17
#Calculating and storing sample standard deviations
sd_wknd <- sd(wknd$Attendance, na.rm = TRUE)
sd_wkday <- sd(wkday$Attendance, na.rm = TRUE)
sd_wknd # = 1687.402
sd_wkday # = 1175.171
#Calculating and storing sample sizes of each subset
n_wknd <- nrow(wknd)
n_wkday <- nrow(wkday)
n_wknd # = 25
n_wkday # = 6
df_wknd <- min(n_wknd - 1, n_wkday - 1)
df_wknd # = 5
t_ts_wknd <- (xbar_wknd - xbar_wkday)/(sqrt(((sd_wknd^2)/n_wknd) + ((sd_wkday^2)/n_wkday)))
t_ts_wknd # = 3.338311
#Calculating and storing p-value
pval_wknd <- pt(t_ts_wknd,df_wknd,lower.tail=FALSE)
pval_wknd # = 0.01029527
wknd_mean_diff <- xbar_wknd - xbar_wkday
wknd_mean_diff # = 1958.153
t_star_wknd <- qt(0.025, df = df_wknd)
t_star_wknd # = --2.570582
m_of_wknd <- t_star_wknd*(sqrt(((sd_wknd^2)/n_wknd) + ((sd_wkday^2)/n_wkday)))
m_of_wknd # = -1507.826
wknd_min <- wknd_mean_diff + m_of_wknd
wknd_min # = 450.3271
wknd_max <- wknd_mean_diff - m_of_wknd
wknd_max # = 3465.98
#Creating subsets of data based on promotion night versus non-promotion night on weekends
promo <- subset(wknd, Promotion.Night == 1)
nopromo <- subset(wknd, Promotion.Night == 0)
# Histogram visualizations of subsets
par(mfrow=c(1,2))
hist(promo$Attendance, main=" Promotion Night Attendance", xlab="Attendance")
# Relatively flat distribution with peaks at middle buckets and end bucket
hist(nopromo$Attendance, main="Non-promotion Night Attendance", xlab="Attendance")
#Calculating and storing sample means
xbar_promo <- mean(promo$Attendance, na.rm = TRUE)
xbar_nopromo <- mean(nopromo$Attendance, na.rm = TRUE)
xbar_promo # = 22772.56
xbar_nopromo # = 23638.56
#Calculating and storing sample standard deviations
sd_promo <- sd(promo$Attendance, na.rm = TRUE)
sd_nopromo <- sd(nopromo$Attendance, na.rm = TRUE)
sd_promo # = 1871.64
sd_nopromo # = 1197.424
#Calculating and storing sample sizes of each subset
n_promo <- nrow(promo)
n_nopromo <- nrow(nopromo)
n_promo # = 16
n_nopromo # = 9
df_promo <- min(n_promo - 1, n_nopromo - 1)
df_promo # = 8
t_ts_promo <- (xbar_promo - xbar_nopromo)/(sqrt(((sd_promo^2)/n_promo) + ((sd_nopromo^2)/n_nopromo)))
t_ts_promo # = -1.408065
#Calculating and storing p-value
pval_promo <- pt(t_ts_promo, df_promo, lower.tail=FALSE)
pval_promo # = 0.9016178
promo_mean_diff <- xbar_promo - xbar_nopromo
promo_mean_diff # = -865.9931
t_star_promo <- qt(0.025, df = df_promo)
t_star_promo # = -2.306004
m_of_e_promo <- t_star_promo*(sqrt(((sd_promo^2)/n_promo) + ((sd_nopromo^2)/n_nopromo)))
m_of_e_promo # = -1418.247
promo_min <- promo_mean_diff + m_of_e_promo
promo_min # = -2284.24
promo_max <- promo_mean_diff - m_of_e_promo
promo_max # = 552.2535
hh <- subset(wknd, FCC.Rank <= 7 & Opp.Rank <=7)
hl <- subset(wknd, FCC.Rank <= 7 & Opp.Rank > 7)
lh <- subset(wknd, FCC.Rank > 7 & Opp.Rank <= 7)
ll <- subset(wknd, FCC.Rank > 7 & Opp.Rank > 7)
# Histogram visualizations of subsets
par(mfrow=c(2,2))
hist(hh$Attendance, main="HH Attendance", xlab="Attendance")
hist(hl$Attendance, main="HL Attendance", xlab="Attendance")
hist(lh$Attendance, main="LH Attendance", xlab="Attendance")
hist(ll$Attendance, main="LL Attendance", xlab="Attendance")
Strength <- c(rep("hh", 4), rep("hl", 5), rep("lh", 8), rep("ll", 8))
Attendance <- c(hh[,2], hl[,2], lh[,2], ll[,2])
df <- data.frame(Strength, Attendance)
df
# Boxplot Visualization of Data
ggplot(df, aes(x = Strength,
y = Attendance,
fill = Strength)) +
geom_boxplot()
attendance.aov <- aov(attendance_var ~ strength, data = df)
summary(attendance.aov)
fcc_high <- subset(wknd, FCC.Rank <= 7)
fcc_low <- subset(wknd, FCC.Rank > 7)
# Visualize data with histograms
# Histogram visualizations of subsets
par(mfrow=c(1,2))
hist(fcc_high$Attendance, main="Attendance When FCC is Performing Well", xlab="Attendance")
# Relatively flat distribution
hist(fcc_low$Attendance, main="Attendance When FCC is Performing Poorly", xlab="Attendance")
#Calculating and storing sample means
xbar_fcc_high <- mean(fcc_high$Attendance, na.rm = TRUE)
xbar_fcc_low <- mean(fcc_low$Attendance, na.rm = TRUE)
xbar_fcc_high # = 23613.44
xbar_fcc_low # = 22786.69
#Calculating and storing sample standard deviations
sd_fcc_high <- sd(fcc_high$Attendance, na.rm = TRUE)
sd_fcc_low <- sd(nopromo$Attendance, na.rm = TRUE)
sd_fcc_high # = 1316.273
sd_fcc_low # = 1197.424
#Calculating and storing sample sizes of each subset
n_fcc_high <- nrow(fcc_high)
n_fcc_low  <- nrow(fcc_low)
n_fcc_high # = 9
n_fcc_low # = 16
df_fcc <- min(n_fcc_high - 1, n_fcc_low - 1)
df_fcc # = 8
t_ts_fcc <- (xbar_fcc_high - xbar_fcc_low)/(sqrt(((sd_fcc_high^2)/n_fcc_high) + ((sd_fcc_low^2)/n_fcc_low)))
t_ts_fcc # = 1.556536
#Calculating and storing p-value
pval_fcc <- pt(t_ts_fcc, df_fcc, lower.tail=FALSE)
pval_fcc # = 0.07909666
fcc_mean_diff <- xbar_fcc_high - xbar_fcc_low
fcc_mean_diff # = 826.7569
t_star_fcc <- qt(0.025, df = df_fcc)
t_star_fcc # = -2.306004
m_of_e_fcc <- t_star_fcc*(sqrt(((sd_fcc_high^2)/n_fcc_high) + ((sd_fcc_low^2)/n_fcc_low)))
m_of_e_fcc # = -1224.839
fcc_min <- fcc_mean_diff + m_of_e_fcc
fcc_min # = -398.0818
fcc_max <- fcc_mean_diff - m_of_e_fcc
fcc_max # = 2051.596
attendance # is training data
proj_attendance # projected attendance data for forecast model
regression <- lm(Attendance ~ Weekend + FCC.Rank + Opp.Rank,
data = attendance)
reg_sum <- summary(regression)
reg_sum
#Coefficients:
#Estimate Std. Error t value Pr(>|t|)
#(Intercept) 22480.41    1296.94  17.333  3.7e-16 ***
#  Weekend      1995.23     740.86   2.693    0.012 *
#  FCC.Rank      -98.15      92.85  -1.057    0.300
#Opp.Rank      -55.91      74.41  -0.751    0.459
---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Residual standard error: 1625 on 27 degrees of freedom
#Multiple R-squared:  0.2396,	Adjusted R-squared:  0.1551
#F-statistic: 2.835 on 3 and 27 DF,  p-value: 0.05689
# If predicting based on weekend, +1995.23 to intercept (when Weekend = 1)
# If predicting based on if FCC table position, -98.15*position to intercept
# If predicting based on if Opp table position,  -55.91*position to intercept
# "Weekend" is the only variable that is statistically significant
#Create Forecast Model:
forecast <- predict(regression, proj_attendance)
forecast
#Coefficients:
#Estimate Std. Error t value Pr(>|t|)
#(Intercept) 22480.41    1296.94  17.333  3.7e-16 ***
#  Weekend      1995.23     740.86   2.693    0.012 *
#  FCC.Rank      -98.15      92.85  -1.057    0.300
#Opp.Rank      -55.91      74.41  -0.751    0.459
---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Residual standard error: 1625 on 27 degrees of freedom
#Multiple R-squared:  0.2396,	Adjusted R-squared:  0.1551
#F-statistic: 2.835 on 3 and 27 DF,  p-value: 0.05689
# If predicting based on weekend, +1995.23 to intercept (when Weekend = 1)
# If predicting based on if FCC table position, -98.15*position to intercept
# If predicting based on if Opp table position,  -55.91*position to intercept
# "Weekend" is the only variable that is statistically significant
#Create Forecast Model:
#forecast <- predict(regression, proj_attendance)
forecast <- predict(regression)
forecast
#Coefficients:
#Estimate Std. Error t value Pr(>|t|)
#(Intercept) 22480.41    1296.94  17.333  3.7e-16 ***
#  Weekend      1995.23     740.86   2.693    0.012 *
#  FCC.Rank      -98.15      92.85  -1.057    0.300
#Opp.Rank      -55.91      74.41  -0.751    0.459
---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Residual standard error: 1625 on 27 degrees of freedom
#Multiple R-squared:  0.2396,	Adjusted R-squared:  0.1551
#F-statistic: 2.835 on 3 and 27 DF,  p-value: 0.05689
# If predicting based on weekend, +1995.23 to intercept (when Weekend = 1)
# If predicting based on if FCC table position, -98.15*position to intercept
# If predicting based on if Opp table position,  -55.91*position to intercept
# "Weekend" is the only variable that is statistically significant
#Create Forecast Model:
#forecast <- predict(regression, proj_attendance)
predict(regression, pro_attendance)
#Coefficients:
#Estimate Std. Error t value Pr(>|t|)
#(Intercept) 22480.41    1296.94  17.333  3.7e-16 ***
#  Weekend      1995.23     740.86   2.693    0.012 *
#  FCC.Rank      -98.15      92.85  -1.057    0.300
#Opp.Rank      -55.91      74.41  -0.751    0.459
---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Residual standard error: 1625 on 27 degrees of freedom
#Multiple R-squared:  0.2396,	Adjusted R-squared:  0.1551
#F-statistic: 2.835 on 3 and 27 DF,  p-value: 0.05689
# If predicting based on weekend, +1995.23 to intercept (when Weekend = 1)
# If predicting based on if FCC table position, -98.15*position to intercept
# If predicting based on if Opp table position,  -55.91*position to intercept
# "Weekend" is the only variable that is statistically significant
#Create Forecast Model:
#forecast <- predict(regression, proj_attendance)
predict(regression, proj_attendance)
#Coefficients:
#Estimate Std. Error t value Pr(>|t|)
#(Intercept) 22480.41    1296.94  17.333  3.7e-16 ***
#  Weekend      1995.23     740.86   2.693    0.012 *
#  FCC.Rank      -98.15      92.85  -1.057    0.300
#Opp.Rank      -55.91      74.41  -0.751    0.459
---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Residual standard error: 1625 on 27 degrees of freedom
#Multiple R-squared:  0.2396,	Adjusted R-squared:  0.1551
#F-statistic: 2.835 on 3 and 27 DF,  p-value: 0.05689
# If predicting based on weekend, +1995.23 to intercept (when Weekend = 1)
# If predicting based on if FCC table position, -98.15*position to intercept
# If predicting based on if Opp table position,  -55.91*position to intercept
# "Weekend" is the only variable that is statistically significant
#Create Forecast Model:
#forecast <- predict(regression, proj_attendance)
forecast <- predict(regression, proj_attendance)
#Coefficients:
#Estimate Std. Error t value Pr(>|t|)
#(Intercept) 22480.41    1296.94  17.333  3.7e-16 ***
#  Weekend      1995.23     740.86   2.693    0.012 *
#  FCC.Rank      -98.15      92.85  -1.057    0.300
#Opp.Rank      -55.91      74.41  -0.751    0.459
---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Residual standard error: 1625 on 27 degrees of freedom
#Multiple R-squared:  0.2396,	Adjusted R-squared:  0.1551
#F-statistic: 2.835 on 3 and 27 DF,  p-value: 0.05689
# If predicting based on weekend, +1995.23 to intercept (when Weekend = 1)
# If predicting based on if FCC table position, -98.15*position to intercept
# If predicting based on if Opp table position,  -55.91*position to intercept
# "Weekend" is the only variable that is statistically significant
#Create Forecast Model:
#forecast <- predict(regression, proj_attendance)
predict(regression, proj_attendance)
regression <- lm(Attendance ~ Weekend + FCC.Rank + Opp.Rank,
data = attendance)
reg_sum <- summary(regression)
reg_sum
#Coefficients:
#Estimate Std. Error t value Pr(>|t|)
#(Intercept) 22480.41    1296.94  17.333  3.7e-16 ***
#  Weekend      1995.23     740.86   2.693    0.012 *
#  FCC.Rank      -98.15      92.85  -1.057    0.300
#Opp.Rank      -55.91      74.41  -0.751    0.459
---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Residual standard error: 1625 on 27 degrees of freedom
#Multiple R-squared:  0.2396,	Adjusted R-squared:  0.1551
#F-statistic: 2.835 on 3 and 27 DF,  p-value: 0.05689
# If predicting based on weekend, +1995.23 to intercept (when Weekend = 1)
# If predicting based on if FCC table position, -98.15*position to intercept
# If predicting based on if Opp table position,  -55.91*position to intercept
# "Weekend" is the only variable that is statistically significant
#Create Forecast Model:
#forecast <- predict(regression, proj_attendance)
predict(regression, proj_attendance)
View(proj_attendance)
forcast <- predict(regression, proj_attendance)
forcast
forecast <- predict(regression, proj_attendance)
forecast
Date_of_Match <- proj_attendance[,8]
Projected_Attendance <- forecast
df_forecast <- data.frame(Date_of_Match, Projected_Attendance = forecast)
ggplot(df_forecast, aes(x = df_forecast$Date_of_Match,
y = df_forecast$forecast)) +
geom_point() +
labs(title = "Attendance Forecast Model for 2023 Season", xlab = "Date of Match", ylab = "Projected Attendance")
rlang::last_trace()
install.packages("rlang")
install.packages("rlang")
ggplot(df_forecast, aes(x = df_forecast$Date_of_Match,
y = df_forecast$forecast)) +
geom_point() +
labs(title = "Attendance Forecast Model for 2023 Season", xlab = "Date of Match", ylab = "Projected Attendance")
ggplot(df_forecast, aes(x = df_forecast$Date_of_Match,
y = df_forecast$forecast)) +
geom_point() +
labs(title = "Attendance Forecast Model for 2023 Season", xlab = "Date of Match", ylab = "Projected Attendance")
ggplot(df_forecast, aes(x = df_forecast$Date_of_Match,
y = df_forecast$Projected_Attendance)) +
geom_point() +
labs(title = "Attendance Forecast Model for 2023 Season", xlab = "Date of Match", ylab = "Projected Attendance")
write.csv(df_forecast, file = "AttendanceForecastData")
write.csv(df_forecast, file = "AttendanceForecastData.csv")
write.csv(attendance, file = "AttendanceTrainData.csv")
#Creating subsets of data based on promotion night versus non-promotion night on weekends
promo <- subset(attendance, Promotion.Night == 1)
nopromo <- subset(attendance, Promotion.Night == 0)
# Histogram visualizations of subsets
par(mfrow=c(1,2))
hist(promo$Attendance, main=" Promotion Night Attendance", xlab="Attendance")
# Relatively flat distribution with peaks at middle buckets and end bucket
hist(nopromo$Attendance, main="Non-promotion Night Attendance", xlab="Attendance")
#Calculating and storing sample means
xbar_promo <- mean(promo$Attendance, na.rm = TRUE)
xbar_nopromo <- mean(nopromo$Attendance, na.rm = TRUE)
xbar_promo # = 22772.56
xbar_nopromo # = 23638.56
#Calculating and storing sample standard deviations
sd_promo <- sd(promo$Attendance, na.rm = TRUE)
sd_nopromo <- sd(nopromo$Attendance, na.rm = TRUE)
sd_promo # = 1871.64
sd_nopromo # = 1197.424
#Calculating and storing sample sizes of each subset
n_promo <- nrow(promo)
n_nopromo <- nrow(nopromo)
n_promo # = 16
n_nopromo # = 9
df_promo <- min(n_promo - 1, n_nopromo - 1)
df_promo # = 8
t_ts_promo <- (xbar_promo - xbar_nopromo)/(sqrt(((sd_promo^2)/n_promo) + ((sd_nopromo^2)/n_nopromo)))
t_ts_promo # = -1.408065
#Calculating and storing p-value
pval_promo <- pt(t_ts_promo, df_promo, lower.tail=FALSE)
pval_promo # = 0.9016178
promo_mean_diff <- xbar_promo - xbar_nopromo
promo_mean_diff # = -865.9931
t_star_promo <- qt(0.025, df = df_promo)
t_star_promo # = -2.306004
m_of_e_promo <- t_star_promo*(sqrt(((sd_promo^2)/n_promo) + ((sd_nopromo^2)/n_nopromo)))
m_of_e_promo # = -1418.247
promo_min <- promo_mean_diff + m_of_e_promo
promo_min # = -2284.24
promo_max <- promo_mean_diff - m_of_e_promo
promo_max # = 552.2535
#Creating subsets of data based on weekend versus weekday on promotion nights
wknd <- subset(promo, Weekend == 1)
wkday <- subset(promo, Weekend == 0)
# Histogram visualizations of subsets
par(mfrow=c(1,2))
hist(wknd$Attendance, main="Weekend Attendance", xlab="Attendance")
# Bimodal distribution with peaks at the middle and end buckets
hist(wkday$Attendance, main="Weekday Attendance", xlab="Attendance")
#Calculating and storing sample means
xbar_wknd <- mean(wknd$Attendance, na.rm = TRUE)
xbar_wkday <- mean(wkday$Attendance, na.rm = TRUE)
xbar_wknd # = 23084.32
xbar_wkday # = 21126.17
#Calculating and storing sample standard deviations
sd_wknd <- sd(wknd$Attendance, na.rm = TRUE)
sd_wkday <- sd(wkday$Attendance, na.rm = TRUE)
sd_wknd # = 1687.402
sd_wkday # = 1175.171
#Calculating and storing sample sizes of each subset
n_wknd <- nrow(wknd)
n_wkday <- nrow(wkday)
n_wknd # = 25
n_wkday # = 6
df_wknd <- min(n_wknd - 1, n_wkday - 1)
df_wknd # = 5
t_ts_wknd <- (xbar_wknd - xbar_wkday)/(sqrt(((sd_wknd^2)/n_wknd) + ((sd_wkday^2)/n_wkday)))
t_ts_wknd # = 3.338311
#Calculating and storing p-value
pval_wknd <- pt(t_ts_wknd,df_wknd,lower.tail=FALSE)
pval_wknd # = 0.01029527
wknd_mean_diff <- xbar_wknd - xbar_wkday
wknd_mean_diff # = 1958.153
t_star_wknd <- qt(0.025, df = df_wknd)
t_star_wknd # = --2.570582
m_of_wknd <- t_star_wknd*(sqrt(((sd_wknd^2)/n_wknd) + ((sd_wkday^2)/n_wkday)))
m_of_wknd # = -1507.826
wknd_min <- wknd_mean_diff + m_of_wknd
wknd_min # = 450.3271
wknd_max <- wknd_mean_diff - m_of_wknd
wknd_max # = 3465.98
hh <- subset(wknd, FCC.Rank <= 7 & Opp.Rank <=7)
hl <- subset(wknd, FCC.Rank <= 7 & Opp.Rank > 7)
lh <- subset(wknd, FCC.Rank > 7 & Opp.Rank <= 7)
ll <- subset(wknd, FCC.Rank > 7 & Opp.Rank > 7)
# Histogram visualizations of subsets
par(mfrow=c(2,2))
hist(hh$Attendance, main="HH Attendance", xlab="Attendance")
hist(hl$Attendance, main="HL Attendance", xlab="Attendance")
hist(lh$Attendance, main="LH Attendance", xlab="Attendance")
hist(ll$Attendance, main="LL Attendance", xlab="Attendance")
View(hh)
View(hl)
View(lh)
View(ll)
# Histogram visualizations of subsets
par(mfrow=c(2,2))
hist(hh$Attendance, main="HH Attendance", xlab="Attendance")
hist(hl$Attendance, main="HL Attendance", xlab="Attendance")
hist(lh$Attendance, main="LH Attendance", xlab="Attendance")
hist(ll$Attendance, main="LL Attendance", xlab="Attendance")
Strength <- c(rep("hh", 3), rep("hl", 2), rep("lh", 5), rep("ll", 6))
Attendance <- c(hh[,2], hl[,2], lh[,2], ll[,2])
df <- data.frame(Strength, Attendance)
df
# Boxplot Visualization of Data
ggplot(df, aes(x = Strength,
y = Attendance,
fill = Strength)) +
geom_boxplot()
attendance.aov <- aov(attendance_var ~ strength, data = df)
summary(attendance.aov)
View(df)
attendance.aov <- aov(Attendance ~ strength, data = df)
summary(attendance.aov)
df <- data.frame(Strength, Attendance)
df
attendance.aov <- aov(Attendance ~ Strength, data = df)
summary(attendance.aov)
fcc_high <- subset(wknd, FCC.Rank <= 7)
fcc_low <- subset(wknd, FCC.Rank > 7)
fcc_high <- subset(wknd, FCC.Rank <= 7)
fcc_low <- subset(wknd, FCC.Rank > 7)
# Visualize data with histograms
# Histogram visualizations of subsets
par(mfrow=c(1,2))
hist(fcc_high$Attendance, main="Attendance When FCC is Performing Well", xlab="Attendance")
# Relatively flat distribution
hist(fcc_low$Attendance, main="Attendance When FCC is Performing Poorly", xlab="Attendance")
#Calculating and storing sample means
xbar_fcc_high <- mean(fcc_high$Attendance, na.rm = TRUE)
xbar_fcc_low <- mean(fcc_low$Attendance, na.rm = TRUE)
xbar_fcc_high # = 23613.44
xbar_fcc_low # = 22786.69
#Calculating and storing sample standard deviations
sd_fcc_high <- sd(fcc_high$Attendance, na.rm = TRUE)
sd_fcc_low <- sd(nopromo$Attendance, na.rm = TRUE)
sd_fcc_high # = 1316.273
sd_fcc_low # = 1197.424
#Calculating and storing sample sizes of each subset
n_fcc_high <- nrow(fcc_high)
n_fcc_low  <- nrow(fcc_low)
n_fcc_high # = 9
n_fcc_low # = 16
df_fcc <- min(n_fcc_high - 1, n_fcc_low - 1)
df_fcc # = 8
t_ts_fcc <- (xbar_fcc_high - xbar_fcc_low)/(sqrt(((sd_fcc_high^2)/n_fcc_high) + ((sd_fcc_low^2)/n_fcc_low)))
t_ts_fcc # = 1.556536
#Calculating and storing p-value
pval_fcc <- pt(t_ts_fcc, df_fcc, lower.tail=FALSE)
pval_fcc # = 0.07909666
fcc_mean_diff <- xbar_fcc_high - xbar_fcc_low
fcc_mean_diff # = 826.7569
t_star_fcc <- qt(0.025, df = df_fcc)
t_star_fcc # = -2.306004
m_of_e_fcc <- t_star_fcc*(sqrt(((sd_fcc_high^2)/n_fcc_high) + ((sd_fcc_low^2)/n_fcc_low)))
m_of_e_fcc # = -1224.839
fcc_min <- fcc_mean_diff + m_of_e_fcc
fcc_min # = -398.0818
fcc_max <- fcc_mean_diff - m_of_e_fcc
fcc_max # = 2051.596
regression <- lm(Attendance ~ Weekend + FCC.Rank + Opp.Rank,
data = attendance)
reg_sum <- summary(regression)
reg_sum
